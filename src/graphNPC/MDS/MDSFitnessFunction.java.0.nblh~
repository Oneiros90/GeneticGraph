package graph.genetic.MDS;

import graph.Graph;
import graph.Node;
import java.util.LinkedList;
import org.jgap.FitnessFunction;
import org.jgap.Gene;
import org.jgap.IChromosome;
import org.jgap.impl.BooleanGene;

/** Questa classe si occupa di valutare la bontà di una soluzione generata dall'algoritmo genetico */
public class MDSFitnessFunction extends FitnessFunction {

    private Graph graph;

    public MDSFitnessFunction(Graph graph) {
        this.graph = graph;
    }

    @Override
    protected double evaluate(IChromosome chromosome) {
        //Ottengo i nodi rappresentati dal cromosoma
        Gene[] genes = chromosome.getGenes();
        LinkedList<Node> nodes = new LinkedList<Node>();
        for (int i = 0; i < genes.length; i++) {
            if (((BooleanGene) genes[i]).booleanValue()) {
                nodes.add(this.graph.getNode(i));
            }
        }

        //Se il cromosoma non rappresenta alcun nodo, elimino il cromosoma dalla popolazione
        //e ritorno il valore massimo come fitness
        if (nodes.size() == 0) {
            chromosome.setIsSelectedForNextGeneration(false);
            return Double.MAX_VALUE;
        }

        //Controllo che i nodi rappresentati dal cromosoma dominino tutti gli altri
        //(altrimenti il cromosoma rappresenta una soluzione non valida)
        for (Node n1 : graph.getNodes()) { //Per ogni nodo...
            if (!nodes.contains(n1)) { //...non rappresentato dal cromosoma...
                boolean isDominated = false; //...controllo che sia dominato da almeno un nodo dominante...
                for (Node n2 : nodes) {
                    if (n1.isLinkedTo(n2)) {
                        isDominated = true;
                        break;
                    }
                }
                if (!isDominated) { //...se non lo è, la soluzione viene scartata
                    chromosome.setIsSelectedForNextGeneration(false);
                    return Double.MAX_VALUE;
                }
            }
        }

        return nodes.size();
    }
}
